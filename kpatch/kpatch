#!/bin/bash

# This is the primary kpatch user script that manages building, applying, and
# displaying information about kernel patch modules installed on the system.

# TODO: add kernelrelease option to manage releases other than the
# currently running one

KERNELRELEASE="$(uname -r)"
SYSDIR="/usr/lib/kpatch/$KERNELRELEASE"
USERDIR="/var/lib/kpatch/$KERNELRELEASE"
ENABLEDDIR="$USERDIR/enabled"

usage () {
	echo "usage:" >&2
	echo "kpatch enable PATCH" >&2
	echo "kpatch disable PATCH" >&2
	echo "kpatch apply [--all | PATCH]" >&2
	echo "kpatch remove PATCH" >&2
	echo "kpatch list" >&2
	echo "kpatch info PATCH" >&2
	echo "kpatch build PATCH.patch" >&2
	exit 1
}

warn() {
	echo "kpatch: $@" >&2
}

die() {
	warn "$@"
	exit 1
}

__find_module () {
	MODULE="$USERDIR/$1"
	[[ -f "$MODULE" ]] && return

	MODULE="$SYSDIR/$1"
	[[ -f "$MODULE" ]] && return

	return 1
}

find_module () {
	arg="$1"
	__find_module "${arg}"
}

load_module () {
	/usr/sbin/insmod "$1"
}

unload_module () {
	/usr/sbin/rmmod "$(basename $1)"
}

module_enabled() {
	[[ -e "$ENABLEDDIR/$(basename $1)" ]]
}

echo_patch_name() {
	NAME="$(basename $1)"
	echo $NAME
}

find_kpatch_build() {
	SCRIPTDIR="$(readlink -f $(dirname $0))"

	# git repo
	KPATCHBUILD="$(readlink -f $SCRIPTDIR/../kpatch-build/kpatch-build)"
	[[ -e "$KPATCHBUILD" ]] && return

	# installation path
	KPATCHBUILD="$(readlink -f $SCRIPTDIR/../libexec/kpatch/kpatch-build)"
	[[ -e "$KPATCHBUILD" ]] && return

	return 1
}

unset MODULE
[[ "$#" -gt 2 ]] || [[ "$#" -lt 1 ]] && usage
case "$1" in
"enable")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "$PATCH is not installed"
	module_enabled $MODULE && die "$PATCH is already enabled"
	mkdir -p $ENABLEDDIR
	ln -s "$MODULE" "$ENABLEDDIR" || die "failed to enable patch $PATCH"
	;;

"disable")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "$PATCH is not installed"
	module_enabled $MODULE || die "$PATCH is already disabled"
	rm -f "$ENABLEDDIR/$(basename $MODULE)" || die "failed to disable patch $PATCH"
	;;

"apply")
	[[ "$#" -ne 2 ]] && usage
	case "$2" in
	"--all")
		for i in "$ENABLEDDIR"/*.ko; do
			[[ -e "$i" ]] || continue
			load_module "$i" || die "failed to load module $i"
		done
		;;
	*)
		PATCH="$2"
		find_module "$PATCH" || die "$PATCH is not installed"
		load_module "$MODULE" || die "failed to load patch $PATCH"
		;;
	esac
	;;

"remove")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	case "$PATCH" in
	*)
		find_module "$PATCH" || die "$PATCH is not installed"
		unload_module "$MODULE" || die "failed to unload patch $PATCH"
		;;
	esac
	;;

"list")
	[[ "$#" -ne 1 ]] && usage
	echo "System patches:"
	for i in "$SYSDIR"/*.ko; do
		[[ -e "$i" ]] || continue
		echo_patch_name $i
	done
	echo ""
	echo "User patches:"
	for i in "$USERDIR"/*.ko; do
		[[ -e "$i" ]] || continue
		echo_patch_name $i
	done
	echo ""
	echo "Enabled patches:"
	for i in "$ENABLEDDIR"/*.ko; do
		[[ -e "$i" ]] || continue
		echo_patch_name $i
	done
	;;

"info")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "$PATCH is not installed"
	echo "Patch information for $PATCH:"
	/usr/sbin/modinfo "$MODULE" || die "failed to get info for patch $PATCH"
	;;

"build")
	find_kpatch_build || die "kpatch-build is not installed"
	shift
	"$KPATCHBUILD" "$@" || die "kpatch build failed"
	;;

*)
	echo "subcommand $1 not recognized"
	usage
	;;
esac
