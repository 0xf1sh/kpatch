#!/bin/bash
#
# kpatch hot patch module management script
#
# Copyright (C) 2014 Seth Jennings <sjenning@redhat.com>
# Copyright (C) 2014 Josh Poimboeuf <jpoimboe@redhat.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA,
# 02110-1301, USA.

# This is the kpatch user script that manages installing, loading, and
# displaying information about kernel patch modules installed on the system.

KERNELRELEASE="$(uname -r)"
SYSDIR="/usr/lib/kpatch/$KERNELRELEASE"
USERDIR="/var/lib/kpatch/$KERNELRELEASE"

usage () {
	echo "usage: kpatch <command> [<args>]" >&2
	echo >&2
	echo "Valid commands:" >&2
	printf '   %-20s %s\n' "install <file>"       "install patch module to the kpatch DB" >&2
	printf '   %-20s %s\n' "uninstall <patch>"    "uninstall patch module from the kpatch DB" >&2
	echo >&2
	printf '   %-20s %s\n' "load --all"           "load all installed patch modules into the running kernel" >&2
	printf '   %-20s %s\n' "load <patch>"         "load installed patch module into the running kernel" >&2
	printf '   %-20s %s\n' "unload <patch>"       "unload patch module from the running kernel" >&2
	echo >&2
	echo >&2
	printf '   %-20s %s\n' "info <patch>"         "show information about an installed patch module" >&2
	echo >&2
	printf '   %-20s %s\n' "list"                 "list installed patch modules" >&2
	exit 1
}

warn() {
	echo "kpatch: $@" >&2
}

die() {
	warn "$@"
	exit 1
}

__find_module () {
	MODULE="$USERDIR/$1"
	[[ -f "$MODULE" ]] && return

	MODULE="$SYSDIR/$1"
	[[ -f "$MODULE" ]] && return

	return 1
}

find_module () {
	arg="$1"
	__find_module "${arg}"
}

find_core_module() {
	COREMOD="/usr/local/lib/modules/$(uname -r)/kpatch/kpatch.ko"
	[[ -f "$COREMOD" ]] && return

	COREMOD="/usr/lib/modules/$(uname -r)/kpatch/kpatch.ko"
	[[ -f "$COREMOD" ]] && return

	return 1
}

core_module_loaded () {
	grep -q "T kpatch_register" /proc/kallsyms
}

load_module () {
	if ! core_module_loaded; then
		find_core_module || die "can't find core module"
		echo "loading core module: $COREMOD"
		/usr/sbin/insmod "$COREMOD" || die "failed to load core module"
	fi
	echo "loading patch module: $1"
	/usr/sbin/insmod "$1"
}

unload_module () {
	echo "unloading patch module: $1"
	/usr/sbin/rmmod "$(basename $1)"
}

echo_patch_name() {
	NAME="$(basename $1)"
	echo $NAME
}

unset MODULE
[[ "$#" -gt 2 ]] || [[ "$#" -lt 1 ]] && usage
case "$1" in
"load")
	[[ "$#" -ne 2 ]] && usage
	case "$2" in
	"--all")
		for i in "$SYSDIR"/*.ko; do
			[[ -e "$i" ]] || continue
			load_module "$i" || die "failed to load module $i"
		done
		for i in "$USERDIR"/*.ko; do
			[[ -e "$i" ]] || continue
			load_module "$i" || die "failed to load module $i"
		done
		;;
	*)
		PATCH="$2"
		find_module "$PATCH" || die "$PATCH is not installed"
		load_module "$MODULE" || die "failed to load patch $PATCH"
		;;
	esac
	;;

"unload")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "$PATCH is not installed"
	unload_module "$MODULE" || die "failed to unload patch $PATCH"
	;;

"install")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	[[ -e "$PATCH" ]] || die "$PATCH doesn't exist"
	[[ ${PATCH: -3} == ".ko" ]] || die "$PATCH isn't a .ko file"

	echo "installing $PATCH to $USERDIR"
	mkdir -p "$USERDIR" || die "failed to create install directory"
	cp -f "$PATCH" "$USERDIR" || die "failed to install patch $PATCH"

	echo "installing $PATCH to initramfs"
	dracut -f || die "dracut failed"
	;;

"uninstall")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "$PATCH is not installed"

	echo "uninstalling $PATCH from $USERDIR"
	rm -f "$USERDIR/$(basename $MODULE)" || die "failed to uninstall patch $PATCH"

	echo "uninstalling $PATCH from initramfs"
	dracut -f || die "dracut failed"
	;;

"list")
	[[ "$#" -ne 1 ]] && usage
	echo "System installed patches:"
	for i in "$SYSDIR"/*.ko; do
		[[ -e "$i" ]] || continue
		echo_patch_name $i
	done
	echo ""
	echo "User installed patches:"
	for i in "$USERDIR"/*.ko; do
		[[ -e "$i" ]] || continue
		echo_patch_name $i
	done
	echo ""
	;;

"info")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "$PATCH is not installed"
	echo "Patch information for $PATCH:"
	/usr/sbin/modinfo "$MODULE" || die "failed to get info for patch $PATCH"
	;;

"help"|"-h"|"--help")
	usage
	;;

*)
	echo "subcommand $1 not recognized"
	usage
	;;
esac
